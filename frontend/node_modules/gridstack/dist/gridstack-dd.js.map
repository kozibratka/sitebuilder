{"version":3,"file":"gridstack-dd.js","sourceRoot":"","sources":["../src/gridstack-dd.ts"],"names":[],"mappings":";AAAA,kCAAkC;;AA2BlC;;GAEG;AACH,MAAa,WAAW;IActB,YAAmB,IAAe;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAZD,gFAAgF;IAChF,MAAM,CAAC,cAAc,CAAC,WAA+B;QACnD,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC;IAED,+CAA+C;IAC/C,MAAM,CAAC,GAAG;QACR,OAAO,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;IACzD,CAAC;IAMM,SAAS,CAAC,EAAuB,EAAE,IAAY,EAAE,GAAW,EAAE,KAAe;QAClF,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,SAAS,CAAC,EAAuB,EAAE,IAAY,EAAE,GAAW,EAAE,KAAe;QAClF,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,EAAoB,EAAE,IAAiB;QACnD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,WAAW,CAAC,EAAoB;QACrC,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,SAAS,CAAC,EAAuB,EAAE,IAAwB,EAAE,GAAW,EAAE,KAAe;QAC9F,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,WAAW,CAAC,EAAuB;QACxC,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,EAAE,CAAC,EAAuB,EAAE,SAAiB,EAAE,QAAoB;QACxE,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,GAAG,CAAC,EAAuB,EAAE,SAAiB;QACnD,OAAO,IAAI,CAAC;IACd,CAAC;;AA9CM,6BAAiB,GAAyB,EAAE,CAAC;AAFtD,kCAiDC","sourcesContent":["// gridstack-dd.ts 2.0.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport { GridStack, GridStackElement } from './gridstack';\r\nimport { GridItemHTMLElement, DDDragInOpt } from './types';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridstackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | {} | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | string;\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n/**\r\n * Base class for drag'n'drop plugin.\r\n */\r\nexport class GridStackDD {\r\n  protected grid: GridStack;\r\n  static registeredPlugins: typeof GridStackDD[] = [];\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDD) {\r\n    GridStackDD.registeredPlugins.push(pluginClass);\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): typeof GridStackDD {\r\n    return GridStackDD.registeredPlugins[0] || GridStackDD;\r\n  }\r\n\r\n  public constructor(grid: GridStack) {\r\n    this.grid = grid;\r\n  }\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD {\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD {\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDD {\r\n    return this;\r\n  }\r\n\r\n  public isDraggable(el: GridStackElement): boolean {\r\n    return false;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDD {\r\n    return this;\r\n  }\r\n\r\n  public isDroppable(el: GridItemHTMLElement): boolean {\r\n    return false;\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, eventName: string, callback: DDCallback): GridStackDD {\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, eventName: string): GridStackDD {\r\n    return this;\r\n  }\r\n}\r\n"]}