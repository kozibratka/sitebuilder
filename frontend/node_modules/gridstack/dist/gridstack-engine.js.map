{"version":3,"file":"gridstack-engine.js","sourceRoot":"","sources":["../src/gridstack-engine.ts"],"names":[],"mappings":"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","sourcesContent":["// gridstack-engine.ts 2.0.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { Utils, obsolete } from './utils';\r\nimport { GridStackNode, GridStackWidget } from './types';\r\n\r\nexport type onChangeCB = (nodes: GridStackNode[], removeDOM?: boolean) => void;\r\n\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nexport class GridStackEngine {\r\n  public column: number;\r\n  public maxRow: number;\r\n  public nodes: GridStackNode[];\r\n  public onchange: onChangeCB;\r\n  public addedNodes: GridStackNode[] = [];\r\n  public removedNodes: GridStackNode[] = [];\r\n  public batchMode: boolean;\r\n  /** @internal */\r\n  private _float: boolean;\r\n  /** @internal */\r\n  private _prevFloat: boolean;\r\n  /** @internal */\r\n  private _layouts?: Layout[][]; // maps column # to array of values nodes\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  private static _idSeq = 1;\r\n\r\n  public constructor(column = 12, onchange?: onChangeCB, float = false, maxRow = 0, nodes: GridStackNode[] = []) {\r\n    this.column = column;\r\n    this.onchange = onchange;\r\n    this._float = float;\r\n    this.maxRow = maxRow;\r\n    this.nodes = nodes;\r\n  }\r\n\r\n  public batchUpdate(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.batchMode = true;\r\n    this._prevFloat = this._float;\r\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\r\n    return this;\r\n  }\r\n\r\n  public commit(): GridStackEngine {\r\n    if (!this.batchMode) return this;\r\n    this.batchMode = false;\r\n    this._float = this._prevFloat;\r\n    delete this._prevFloat;\r\n    this._packNodes();\r\n    this._notify();\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _fixCollisions(node: GridStackNode): GridStackEngine {\r\n    this._sortNodes(-1);\r\n\r\n    let nn = node;\r\n    let hasLocked = Boolean(this.nodes.find(n => n.locked));\r\n    if (!this.float && !hasLocked) {\r\n      nn = {x: 0, y: node.y, width: this.column, height: node.height};\r\n    }\r\n    while (true) {\r\n      let collisionNode = this.nodes.find( n => n !== node && Utils.isIntercepted(n, nn), {node: node, nn: nn});\r\n      if (!collisionNode) { return this }\r\n      let moved;\r\n      if (collisionNode.locked) {\r\n        // if colliding with a locked item, move ourself instead\r\n        moved = this.moveNode(node, node.x, collisionNode.y + collisionNode.height,\r\n          node.width, node.height, true);\r\n      } else {\r\n        moved = this.moveNode(collisionNode, collisionNode.x, node.y + node.height,\r\n          collisionNode.width, collisionNode.height, true);\r\n      }\r\n      if (!moved) { return this } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n    }\r\n  }\r\n\r\n  public isAreaEmpty(x: number, y: number, width: number, height: number): boolean {\r\n    let nn = {x: x || 0, y: y || 0, width: width || 1, height: height || 1};\r\n    let collisionNode = this.nodes.find(n => {\r\n      return Utils.isIntercepted(n, nn);\r\n    });\r\n    return !collisionNode;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStackEngine {\r\n    if (this.nodes.length === 0) { return this }\r\n    this.batchUpdate();\r\n    this._sortNodes();\r\n    let copyNodes = this.nodes;\r\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n    copyNodes.forEach(node => {\r\n      if (!node.noMove && !node.locked) {\r\n        node.autoPosition = true;\r\n      }\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    });\r\n    this.commit();\r\n    return this;\r\n  }\r\n\r\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n  public set float(val: boolean) {\r\n    if (this._float === val) { return; }\r\n    this._float = val || false;\r\n    if (!val) {\r\n      this._packNodes();\r\n      this._notify();\r\n    }\r\n  }\r\n\r\n  /** float getter method */\r\n  public get float(): boolean { return this._float || false; }\r\n\r\n  /** @internal */\r\n  private _sortNodes(dir?: -1 | 1): GridStackEngine {\r\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _packNodes(): GridStackEngine {\r\n    this._sortNodes();\r\n\r\n    if (this.float) {\r\n      this.nodes.forEach((n, i) => {\r\n        if (n._updating || n._packY === undefined || n.y === n._packY) {\r\n          return this;\r\n        }\r\n        let newY = n.y;\r\n        while (newY >= n._packY) {\r\n          let box = {x: n.x, y: newY, width: n.width, height: n.height};\r\n          let collisionNode = this.nodes\r\n            .slice(0, i)\r\n            .find(bn => Utils.isIntercepted(box, bn), {n: n, newY: newY});\r\n          if (!collisionNode) {\r\n            n._dirty = true;\r\n            n.y = newY;\r\n          }\r\n          --newY;\r\n        }\r\n      });\r\n    } else {\r\n      this.nodes.forEach((n, i) => {\r\n        if (n.locked) { return this }\r\n        while (n.y > 0) {\r\n          let newY = n.y - 1;\r\n          let canBeMoved = i === 0;\r\n          let box = {x: n.x, y: newY, width: n.width, height: n.height};\r\n          if (i > 0) {\r\n            let collisionNode = this.nodes\r\n              .slice(0, i)\r\n              .find(bn => Utils.isIntercepted(box, bn), {n: n, newY: newY});\r\n            canBeMoved = collisionNode === undefined;\r\n          }\r\n\r\n          if (!canBeMoved) { break; }\r\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n          // and move items back. The user 'change' CB should detect changes from the original\r\n          // starting position instead.\r\n          n._dirty = (n.y !== newY);\r\n          n.y = newY;\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\r\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n    node = node || {};\r\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n      node.autoPosition = true;\r\n    }\r\n\r\n    // assign defaults for missing required fields\r\n    let defaults = {width: 1, height: 1, x: 0, y: 0};\r\n    node = Utils.defaults(node, defaults);\r\n\r\n    node.autoPosition = node.autoPosition || false;\r\n    node.noResize = node.noResize || false;\r\n    node.noMove = node.noMove || false;\r\n\r\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n    if (Number.isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\r\n    if (Number.isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\r\n    if (Number.isNaN(node.width))  { node.width = defaults.width; }\r\n    if (Number.isNaN(node.height)) { node.height = defaults.height; }\r\n\r\n    if (node.maxWidth) { node.width = Math.min(node.width, node.maxWidth); }\r\n    if (node.maxHeight) { node.height = Math.min(node.height, node.maxHeight); }\r\n    if (node.minWidth) { node.width = Math.max(node.width, node.minWidth); }\r\n    if (node.minHeight) { node.height = Math.max(node.height, node.minHeight); }\r\n\r\n    if (node.width > this.column) {\r\n      node.width = this.column;\r\n    } else if (node.width < 1) {\r\n      node.width = 1;\r\n    }\r\n\r\n    if (this.maxRow && node.height > this.maxRow) {\r\n      node.height = this.maxRow;\r\n    } else if (node.height < 1) {\r\n      node.height = 1;\r\n    }\r\n\r\n    if (node.x < 0) {\r\n      node.x = 0;\r\n    }\r\n    if (node.y < 0) {\r\n      node.y = 0;\r\n    }\r\n\r\n    if (node.x + node.width > this.column) {\r\n      if (resizing) {\r\n        node.width = this.column - node.x;\r\n      } else {\r\n        node.x = this.column - node.width;\r\n      }\r\n    }\r\n    if (this.maxRow && node.y + node.height > this.maxRow) {\r\n      if (resizing) {\r\n        node.height = this.maxRow - node.y;\r\n      } else {\r\n        node.y = this.maxRow - node.height;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\r\n    // compare original X,Y,W,H (or entire node?) instead as _dirty can be a temporary state\r\n    if (verify) {\r\n      let dirtNodes: GridStackNode[] = [];\r\n      this.nodes.forEach(n => {\r\n        if (n._dirty) {\r\n          if (n.y === n._origY && n.x === n._origX && n.width === n._origW && n.height === n._origH) {\r\n            delete n._dirty;\r\n          } else {\r\n            dirtNodes.push(n);\r\n          }\r\n        }\r\n      });\r\n      return dirtNodes;\r\n    }\r\n\r\n    return this.nodes.filter(n => n._dirty);\r\n  }\r\n\r\n  /** @internal */\r\n  private _notify(nodes?: GridStackNode | GridStackNode[], removeDOM = true): GridStackEngine {\r\n    if (this.batchMode) { return this }\r\n    nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]) );\r\n    let dirtyNodes = nodes.concat(this.getDirtyNodes());\r\n    if (this.onchange) {\r\n      this.onchange(dirtyNodes, removeDOM);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public cleanNodes(): GridStackEngine {\r\n    if (this.batchMode) { return this }\r\n    this.nodes.forEach(n => { delete n._dirty; });\r\n    return this;\r\n  }\r\n\r\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\r\n    node = this.prepareNode(node);\r\n\r\n    node._id = node._id || GridStackEngine._idSeq++;\r\n\r\n    if (node.autoPosition) {\r\n      this._sortNodes();\r\n\r\n      for (let i = 0;; ++i) {\r\n        let x = i % this.column;\r\n        let y = Math.floor(i / this.column);\r\n        if (x + node.width > this.column) {\r\n          continue;\r\n        }\r\n        let box = {x: x, y: y, width: node.width, height: node.height};\r\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n), {x: x, y: y, node: node})) {\r\n          node.x = x;\r\n          node.y = y;\r\n          delete node.autoPosition; // found our slot\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nodes.push(node);\r\n    if (triggerAddEvent) {\r\n      this.addedNodes.push(node);\r\n    }\r\n\r\n    this._fixCollisions(node);\r\n    this._packNodes();\r\n    this._notify();\r\n    return node;\r\n  }\r\n\r\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\r\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n      this.removedNodes.push(node);\r\n    }\r\n    node._id = null; // hint that node is being removed\r\n    // TODO: .splice(findIndex(),1) would be faster but apparently there are cases we have 2 instances ! (see spec 'load add new, delete others')\r\n    // this.nodes = this.nodes.filter(n => n !== node);\r\n    this.nodes.splice(this.nodes.findIndex(n => n === node), 1);\r\n    if (!this.float) {\r\n      this._packNodes();\r\n    }\r\n    this._notify(node, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  public removeAll(removeDOM = true): GridStackEngine {\r\n    delete this._layouts;\r\n    if (this.nodes.length === 0) { return this }\r\n    if (removeDOM) {\r\n      this.nodes.forEach(n => { n._id = null; }); // hint that node is being removed\r\n    }\r\n    this.removedNodes = this.nodes;\r\n    this.nodes = [];\r\n    this._notify(this.removedNodes, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  public canMoveNode(node: GridStackNode, x: number, y: number, width?: number, height?: number): boolean {\r\n    if (!this.isNodeChangedPosition(node, x, y, width, height)) {\r\n      return false;\r\n    }\r\n    let hasLocked = Boolean(this.nodes.find(n => n.locked));\r\n\r\n    if (!this.maxRow && !hasLocked) {\r\n      return true;\r\n    }\r\n\r\n    let clonedNode: GridStackNode;\r\n    let clone = new GridStackEngine(\r\n      this.column,\r\n      null,\r\n      this.float,\r\n      0,\r\n      this.nodes.map(n => {\r\n        if (n === node) {\r\n          clonedNode = Utils.clone(n);\r\n          return clonedNode;\r\n        }\r\n        return Utils.clone(n);\r\n      }));\r\n\r\n    if (!clonedNode) {  return true;}\r\n\r\n    clone.moveNode(clonedNode, x, y, width, height);\r\n\r\n    let canMove = true;\r\n    if (hasLocked) {\r\n      canMove = canMove && !Boolean(clone.nodes.find(n => {\r\n        return n !== clonedNode && Boolean(n.locked) && Boolean(n._dirty);\r\n      }));\r\n    }\r\n    if (this.maxRow) {\r\n      canMove = canMove && (clone.getRow() <= this.maxRow);\r\n    }\r\n\r\n    return canMove;\r\n  }\r\n\r\n  public canBePlacedWithRespectToHeight(node: GridStackNode): boolean {\r\n    if (!this.maxRow) {\r\n      return true;\r\n    }\r\n\r\n    let clone = new GridStackEngine(\r\n      this.column,\r\n      null,\r\n      this.float,\r\n      0,\r\n      this.nodes.map(n => Utils.clone(n)));\r\n    clone.addNode(node);\r\n    return clone.getRow() <= this.maxRow;\r\n  }\r\n\r\n  public isNodeChangedPosition(node: GridStackNode, x: number, y: number, width: number, height: number): boolean {\r\n    if (typeof x !== 'number') { x = node.x; }\r\n    if (typeof y !== 'number') { y = node.y; }\r\n    if (typeof width !== 'number') { width = node.width; }\r\n    if (typeof height !== 'number') { height = node.height; }\r\n\r\n    if (node.maxWidth) { width = Math.min(width, node.maxWidth); }\r\n    if (node.maxHeight) { height = Math.min(height, node.maxHeight); }\r\n    if (node.minWidth) { width = Math.max(width, node.minWidth); }\r\n    if (node.minHeight) { height = Math.max(height, node.minHeight); }\r\n\r\n    if (node.x === x && node.y === y && node.width === width && node.height === height) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public moveNode(node: GridStackNode, x: number, y: number, width?: number, height?: number, noPack?: boolean): GridStackNode {\r\n    if (node.locked) { return null; }\r\n    if (typeof x !== 'number') { x = node.x; }\r\n    if (typeof y !== 'number') { y = node.y; }\r\n    if (typeof width !== 'number') { width = node.width; }\r\n    if (typeof height !== 'number') { height = node.height; }\r\n\r\n    // constrain the passed in values and check if we're still changing our node\r\n    let resizing = (node.width !== width || node.height !== height);\r\n    let nn: GridStackNode = { x, y, width, height,\r\n      maxWidth: node.maxWidth, maxHeight: node.maxHeight, minWidth: node.minWidth, minHeight: node.minHeight};\r\n    nn = this.prepareNode(nn, resizing);\r\n    if (node.x === nn.x && node.y === nn.y && node.width === nn.width && node.height === nn.height) {\r\n      return null;\r\n    }\r\n\r\n    node._dirty = true;\r\n\r\n    node.x = node._lastTriedX = nn.x;\r\n    node.y = node._lastTriedY = nn.y;\r\n    node.width = node._lastTriedWidth = nn.width;\r\n    node.height = node._lastTriedHeight = nn.height;\r\n\r\n    this._fixCollisions(node);\r\n    if (!noPack) {\r\n      this._packNodes();\r\n      this._notify();\r\n    }\r\n    return node;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.nodes.reduce((memo, n) => Math.max(memo, n.y + n.height), 0);\r\n  }\r\n\r\n  public beginUpdate(node: GridStackNode): GridStackEngine {\r\n    if (node._updating) return this;\r\n    node._updating = true;\r\n    this.nodes.forEach(n => { n._packY = n.y; });\r\n    return this;\r\n  }\r\n\r\n  public endUpdate(): GridStackEngine {\r\n    let n = this.nodes.find(n => n._updating);\r\n    if (n) {\r\n      delete n._updating;\r\n      this.nodes.forEach(n => { delete n._packY; });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** saves the current layout returning a list of widgets for serialization */\r\n  public save(): GridStackWidget[] {\r\n    let widgets: GridStackWidget[] = [];\r\n    Utils.sort(this.nodes);\r\n    this.nodes.forEach(n => {\r\n      let w: GridStackNode = {};\r\n      for (let key in n) { if (key[0] !== '_' && n[key] !== null && n[key] !== undefined ) w[key] = n[key]; }\r\n      // delete other internals\r\n      delete w.el;\r\n      delete w.grid;\r\n      // delete default values (will be re-created on read)\r\n      if (!w.autoPosition) delete w.autoPosition;\r\n      if (!w.noResize) delete w.noResize;\r\n      if (!w.noMove) delete w.noMove;\r\n      if (!w.locked) delete w.locked;\r\n      widgets.push(w);\r\n    });\r\n    return widgets;\r\n  }\r\n\r\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this._layouts || this._ignoreLayoutsNodeChange) return this;\r\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n    this._layouts.forEach((layout, column) => {\r\n      if (!layout || column === this.column) return this;\r\n      if (column < this.column) {\r\n        this._layouts[column] = undefined;\r\n      }\r\n      else {\r\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n        // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.\r\n        nodes.forEach(node => {\r\n          let n = layout.find(l => l._id === node._id);\r\n          if (!n) return this; // no cache for new nodes. Will use those values.\r\n          let ratio = column / this.column;\r\n          // Y changed, push down same amount\r\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n          if (node.y !== node._origY) {\r\n            n.y += (node.y - node._origY);\r\n          }\r\n          // X changed, scale from new position\r\n          if (node.x !== node._origX) {\r\n            n.x = Math.round(node.x * ratio);\r\n          }\r\n          // width changed, scale from new width\r\n          if (node.width !== node._origW) {\r\n            n.width = Math.round(node.width * ratio);\r\n          }\r\n          // ...height always carries over from cache\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param oldColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   */\r\n  public updateNodeWidths(oldColumn: number, column: number, nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this.nodes.length || oldColumn === column) { return this }\r\n\r\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n    let copy: Layout[] = [];\r\n    this.nodes.forEach((n, i) => { copy[i] = {x: n.x, y: n.y, width: n.width, _id: n._id} }); // only thing we change is x,y,w and id to find it back\r\n    this._layouts = this._layouts || []; // use array to find larger quick\r\n    this._layouts[oldColumn] = copy;\r\n\r\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n    if (column === 1 && nodes && nodes.length) {\r\n      let top = 0;\r\n      nodes.forEach(n => {\r\n        n.x = 0;\r\n        n.width = 1;\r\n        n.y = Math.max(n.y, top);\r\n        top = n.y + n.height;\r\n      });\r\n    } else {\r\n      nodes = Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n    }\r\n\r\n    // see if we have cached previous layout.\r\n    let cacheNodes = this._layouts[column] || [];\r\n    // if not AND we are going up in size start with the largest layout as down-scaling is more accurate\r\n    let lastIndex = this._layouts.length - 1;\r\n    if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {\r\n      cacheNodes = this._layouts[lastIndex] || [];\r\n      if (cacheNodes.length) {\r\n        // pretend we came from that larger column by assigning those values as starting point\r\n        oldColumn = lastIndex;\r\n        cacheNodes.forEach(cacheNode => {\r\n          let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n          if (j !== -1) {\r\n            // still current, use cache info positions\r\n            nodes[j].x = cacheNode.x;\r\n            nodes[j].y = cacheNode.y;\r\n            nodes[j].width = cacheNode.width;\r\n          }\r\n        });\r\n        cacheNodes = []; // we still don't have new column cached data... will generate from larger one.\r\n      }\r\n    }\r\n\r\n    // if we found cache re-use those nodes that are still current\r\n    let newNodes: GridStackNode[] = [];\r\n    cacheNodes.forEach(cacheNode => {\r\n      let j = nodes.findIndex(n => n && n._id === cacheNode._id);\r\n      if (j !== -1) {\r\n        // still current, use cache info positions\r\n        nodes[j].x = cacheNode.x;\r\n        nodes[j].y = cacheNode.y;\r\n        nodes[j].width = cacheNode.width;\r\n        newNodes.push(nodes[j]);\r\n        nodes[j] = null; // erase it so we know what's left\r\n      }\r\n    });\r\n    // ...and add any extra non-cached ones\r\n    let ratio = column / oldColumn;\r\n    nodes.forEach(node => {\r\n      if (!node) return this;\r\n      node.x = (column === 1 ? 0 : Math.round(node.x * ratio));\r\n      node.width = ((column === 1 || oldColumn === 1) ? 1 : (Math.round(node.width * ratio) || 1));\r\n      newNodes.push(node);\r\n    });\r\n\r\n    // finally re-layout them in reverse order (to get correct placement)\r\n    newNodes = Utils.sort(newNodes, -1, column);\r\n    this._ignoreLayoutsNodeChange = true;\r\n    this.batchUpdate();\r\n    this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout\r\n    newNodes.forEach(node => {\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    }, this);\r\n    this.commit();\r\n    delete this._ignoreLayoutsNodeChange;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to save initial position/size */\r\n  public saveInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      n._origX = n.x;\r\n      n._origY = n.y;\r\n      n._origW = n.width;\r\n      n._origH = n.height;\r\n      delete n._dirty;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** called to remove all internal values */\r\n  public cleanupNode(node: GridStackNode) {\r\n    for (let prop in node) {\r\n      if (prop[0] === '_') delete node[prop];\r\n    }\r\n  }\r\n\r\n  /** @internal legacy method renames */\r\n  private getGridHeight = obsolete(this, GridStackEngine.prototype.getRow, 'getGridHeight', 'getRow', 'v1.0.0');\r\n}\r\n\r\n/** @internal class to store per column layout bare minimal info (subset of GridStackWidget) */\r\ninterface Layout {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  _id: number; // so we can find full node back\r\n}\r\n"]}