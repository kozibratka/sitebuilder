{"version":3,"file":"ngx-sortablejs.js","sources":["ng:/ngx-sortablejs/lib/globals.ts","ng:/ngx-sortablejs/lib/sortablejs-binding.ts","ng:/ngx-sortablejs/lib/sortablejs-bindings.ts","ng:/ngx-sortablejs/lib/sortablejs.service.ts","ng:/ngx-sortablejs/lib/sortablejs.directive.ts","ng:/ngx-sortablejs/lib/sortablejs.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { SortablejsOptions } from './sortablejs-options';\n\nexport const GLOBALS: InjectionToken<SortablejsOptions> = new InjectionToken('Global config for sortablejs');\n","import { SortablejsBindingTarget } from './sortablejs-binding-target';\n\nexport class SortablejsBinding {\n\n  constructor(private target: SortablejsBindingTarget) { }\n\n  insert(index: number, item: any) {\n    if (this.isFormArray) {\n      this.target.insert(index, item);\n    } else {\n      this.target.splice(index, 0, item);\n    }\n  }\n\n  get(index: number) {\n    return this.isFormArray ? this.target.at(index) : this.target[index];\n  }\n\n  remove(index: number) {\n    let item;\n\n    if (this.isFormArray) {\n      item = this.target.at(index);\n      this.target.removeAt(index);\n    } else {\n      item = this.target.splice(index, 1)[0];\n    }\n\n    return item;\n  }\n\n  // we need this to identify that the target is a FormArray\n  // we don't want to have a dependency on @angular/forms just for that\n  private get isFormArray() {\n    // just checking for random FormArray methods not available on a standard array\n    return !!this.target.at && !!this.target.insert && !!this.target.reset;\n  }\n\n}\n","import { SortablejsBinding } from './sortablejs-binding';\nimport { SortablejsBindingTarget } from './sortablejs-binding-target';\n\nexport class SortablejsBindings {\n\n  bindings: SortablejsBinding[];\n\n  constructor(bindingTargets: SortablejsBindingTarget[]) {\n    this.bindings = bindingTargets.map(target => new SortablejsBinding(target));\n  }\n\n  injectIntoEvery(index: number, items: any[]) {\n    this.bindings.forEach((b, i) => b.insert(index, items[i]));\n  }\n\n  getFromEvery(index: number) {\n    return this.bindings.map(b => b.get(index));\n  }\n\n  extractFromEvery(index: number) {\n    return this.bindings.map(b => b.remove(index));\n  }\n\n  get provided() {\n    return !!this.bindings.length;\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SortablejsService {\n\n  // original library calls the events in unnatural order\n  // first the item is added, then removed from the previous array\n  // this is a temporary event to work this around\n  // as long as only one sortable takes place at a certain time\n  // this is enough to have a single `global` event\n  transfer: (items: any[]) => void;\n\n}\n","import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnChanges, OnDestroy, OnInit, Optional, Output, Renderer2, SimpleChange } from '@angular/core';\nimport Sortable from 'sortablejs';\nimport { GLOBALS } from './globals';\nimport { SortablejsBindingTarget } from './sortablejs-binding-target';\nimport { SortablejsBindings } from './sortablejs-bindings';\nimport { SortablejsOptions } from './sortablejs-options';\nimport { SortablejsService } from './sortablejs.service';\n\nconst getIndexesFromEvent = (event: SortableEvent) => {\n  if (event.hasOwnProperty('newDraggableIndex') && event.hasOwnProperty('oldDraggableIndex')) {\n      return {\n        new: event.newDraggableIndex,\n        old: event.oldDraggableIndex,\n      };\n  } else {\n    return {\n      new: event.newIndex,\n      old: event.oldIndex,\n    };\n  }\n};\n\n@Directive({\n  selector: '[sortablejs]',\n})\nexport class SortablejsDirective implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  sortablejs: SortablejsBindingTarget; // array or a FormArray\n\n  @Input()\n  sortablejsContainer: string;\n\n  @Input()\n  sortablejsOptions: SortablejsOptions;\n\n  @Input()\n  sortablejsCloneFunction: <T>(item: T) => T;\n\n  private sortableInstance: any;\n\n  @Input() runInsideAngular = false; // to be deprecated\n\n  @Output() sortablejsInit = new EventEmitter();\n\n  constructor(\n    @Optional() @Inject(GLOBALS) private globalConfig: SortablejsOptions,\n    private service: SortablejsService,\n    private element: ElementRef,\n    private zone: NgZone,\n    private renderer: Renderer2,\n  ) { }\n\n  ngOnInit() {\n    if (Sortable && Sortable.create) { // Sortable does not exist in angular universal (SSR)\n      if (this.runInsideAngular) {\n        this.create();\n      } else {\n        this.zone.runOutsideAngular(() => this.create());\n      }\n    }\n  }\n\n  ngOnChanges(changes: { [prop in keyof SortablejsDirective]: SimpleChange }) {\n    const optionsChange: SimpleChange = changes.sortablejsOptions;\n\n    if (optionsChange && !optionsChange.isFirstChange()) {\n      const previousOptions: SortablejsOptions = optionsChange.previousValue;\n      const currentOptions: SortablejsOptions = optionsChange.currentValue;\n\n      Object.keys(currentOptions).forEach(optionName => {\n        if (currentOptions[optionName] !== previousOptions[optionName]) {\n          // use low-level option setter\n          this.sortableInstance.option(optionName, this.options[optionName]);\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sortableInstance) {\n      this.sortableInstance.destroy();\n    }\n  }\n\n  private create() {\n    const container = this.sortablejsContainer ? this.element.nativeElement.querySelector(this.sortablejsContainer) : this.element.nativeElement;\n\n    setTimeout(() => {\n      this.sortableInstance = Sortable.create(container, this.options);\n      this.sortablejsInit.emit(this.sortableInstance);\n    }, 0);\n  }\n\n  private getBindings(): SortablejsBindings {\n    if (!this.sortablejs) {\n      return new SortablejsBindings([]);\n    } else if (this.sortablejs instanceof SortablejsBindings) {\n      return this.sortablejs;\n    } else {\n      return new SortablejsBindings([this.sortablejs]);\n    }\n  }\n\n  private get options() {\n    return { ...this.optionsWithoutEvents, ...this.overridenOptions };\n  }\n\n  private get optionsWithoutEvents() {\n    return { ...(this.globalConfig || {}), ...(this.sortablejsOptions || {}) };\n  }\n\n  private proxyEvent(eventName: string, ...params: any[]) {\n    this.zone.run(() => { // re-entering zone, see https://github.com/SortableJS/angular-sortablejs/issues/110#issuecomment-408874600\n      if (this.optionsWithoutEvents && this.optionsWithoutEvents[eventName]) {\n        this.optionsWithoutEvents[eventName](...params);\n      }\n    });\n  }\n\n  private get isCloning() {\n    return this.sortableInstance.options.group.checkPull(this.sortableInstance, this.sortableInstance) === 'clone';\n  }\n\n  private clone<T>(item: T): T {\n    // by default pass the item through, no cloning performed\n    return (this.sortablejsCloneFunction || (subitem => subitem))(item);\n  }\n\n  private get overridenOptions(): SortablejsOptions {\n    // always intercept standard events but act only in case items are set (bindingEnabled)\n    // allows to forget about tracking this.items changes\n    return {\n      onAdd: (event: SortableEvent) => {\n        this.service.transfer = (items: any[]) => {\n          this.getBindings().injectIntoEvery(event.newIndex, items);\n          this.proxyEvent('onAdd', event);\n        };\n\n        this.proxyEvent('onAddOriginal', event);\n      },\n      onRemove: (event: SortableEvent) => {\n        const bindings = this.getBindings();\n\n        if (bindings.provided) {\n          if (this.isCloning) {\n            this.service.transfer(bindings.getFromEvery(event.oldIndex).map(item => this.clone(item)));\n\n            // great thanks to https://github.com/tauu\n            // event.item is the original item from the source list which is moved to the target list\n            // event.clone is a clone of the original item and will be added to source list\n            // If bindings are provided, adding the item dom element to the target list causes artifacts\n            // as it interferes with the rendering performed by the angular template.\n            // Therefore we remove it immediately and also move the original item back to the source list.\n            // (event handler may be attached to the original item and not its clone, therefore keeping\n            // the original dom node, circumvents side effects )\n            this.renderer.removeChild(event.item.parentNode, event.item);\n            this.renderer.insertBefore(event.clone.parentNode, event.item, event.clone);\n            this.renderer.removeChild(event.clone.parentNode, event.clone);\n          } else {\n            this.service.transfer(bindings.extractFromEvery(event.oldIndex));\n          }\n\n          this.service.transfer = null;\n        }\n\n        this.proxyEvent('onRemove', event);\n      },\n      onUpdate: (event: SortableEvent) => {\n        const bindings = this.getBindings();\n        const indexes = getIndexesFromEvent(event);\n\n        bindings.injectIntoEvery(indexes.new, bindings.extractFromEvery(indexes.old));\n        this.proxyEvent('onUpdate', event);\n      },\n    };\n  }\n\n}\n\ninterface SortableEvent {\n  oldIndex: number;\n  newIndex: number;\n  oldDraggableIndex?: number;\n  newDraggableIndex?: number;\n  item: HTMLElement;\n  clone: HTMLElement;\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { GLOBALS } from './globals';\nimport { SortablejsOptions } from './sortablejs-options';\nimport { SortablejsDirective } from './sortablejs.directive';\n\n@NgModule({\n  declarations: [SortablejsDirective],\n  exports: [SortablejsDirective],\n})\nexport class SortablejsModule {\n\n  public static forRoot(globalOptions: SortablejsOptions): ModuleWithProviders {\n    return {\n      ngModule: SortablejsModule,\n      providers: [\n        { provide: GLOBALS, useValue: globalOptions },\n      ],\n    };\n  }\n\n}\n"]}