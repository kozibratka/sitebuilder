{"version":3,"file":"ngx-sortablejs.js","sources":["ng://ngx-sortablejs/lib/globals.ts","ng://ngx-sortablejs/lib/sortablejs-binding.ts","ng://ngx-sortablejs/lib/sortablejs-bindings.ts","ng://ngx-sortablejs/lib/sortablejs.service.ts","ng://ngx-sortablejs/lib/sortablejs.directive.ts","ng://ngx-sortablejs/lib/sortablejs.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { SortablejsOptions } from './sortablejs-options';\n\nexport const GLOBALS: InjectionToken<SortablejsOptions> = new InjectionToken('Global config for sortablejs');\n","import { SortablejsBindingTarget } from './sortablejs-binding-target';\n\nexport class SortablejsBinding {\n\n  constructor(private target: SortablejsBindingTarget) { }\n\n  insert(index: number, item: any) {\n    if (this.isFormArray) {\n      this.target.insert(index, item);\n    } else {\n      this.target.splice(index, 0, item);\n    }\n  }\n\n  get(index: number) {\n    return this.isFormArray ? this.target.at(index) : this.target[index];\n  }\n\n  remove(index: number) {\n    let item;\n\n    if (this.isFormArray) {\n      item = this.target.at(index);\n      this.target.removeAt(index);\n    } else {\n      item = this.target.splice(index, 1)[0];\n    }\n\n    return item;\n  }\n\n  // we need this to identify that the target is a FormArray\n  // we don't want to have a dependency on @angular/forms just for that\n  private get isFormArray() {\n    // just checking for random FormArray methods not available on a standard array\n    return !!this.target.at && !!this.target.insert && !!this.target.reset;\n  }\n\n}\n","import { SortablejsBinding } from './sortablejs-binding';\nimport { SortablejsBindingTarget } from './sortablejs-binding-target';\n\nexport class SortablejsBindings {\n\n  bindings: SortablejsBinding[];\n\n  constructor(bindingTargets: SortablejsBindingTarget[]) {\n    this.bindings = bindingTargets.map(target => new SortablejsBinding(target));\n  }\n\n  injectIntoEvery(index: number, items: any[]) {\n    this.bindings.forEach((b, i) => b.insert(index, items[i]));\n  }\n\n  getFromEvery(index: number) {\n    return this.bindings.map(b => b.get(index));\n  }\n\n  extractFromEvery(index: number) {\n    return this.bindings.map(b => b.remove(index));\n  }\n\n  get provided() {\n    return !!this.bindings.length;\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SortablejsService {\n\n  // original library calls the events in unnatural order\n  // first the item is added, then removed from the previous array\n  // this is a temporary event to work this around\n  // as long as only one sortable takes place at a certain time\n  // this is enough to have a single `global` event\n  transfer: (items: any[]) => void;\n\n}\n","import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnChanges, OnDestroy, OnInit, Optional, Output, Renderer2, SimpleChange } from '@angular/core';\nimport Sortable from 'sortablejs';\nimport { GLOBALS } from './globals';\nimport { SortablejsBindingTarget } from './sortablejs-binding-target';\nimport { SortablejsBindings } from './sortablejs-bindings';\nimport { SortablejsOptions } from './sortablejs-options';\nimport { SortablejsService } from './sortablejs.service';\n\nconst getIndexesFromEvent = (event: SortableEvent) => {\n  if (event.hasOwnProperty('newDraggableIndex') && event.hasOwnProperty('oldDraggableIndex')) {\n      return {\n        new: event.newDraggableIndex,\n        old: event.oldDraggableIndex,\n      };\n  } else {\n    return {\n      new: event.newIndex,\n      old: event.oldIndex,\n    };\n  }\n};\n\n@Directive({\n  selector: '[sortablejs]',\n})\nexport class SortablejsDirective implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  sortablejs: SortablejsBindingTarget; // array or a FormArray\n\n  @Input()\n  sortablejsContainer: string;\n\n  @Input()\n  sortablejsOptions: SortablejsOptions;\n\n  @Input()\n  sortablejsCloneFunction: <T>(item: T) => T;\n\n  private sortableInstance: any;\n\n  @Input() runInsideAngular = false; // to be deprecated\n\n  @Output() sortablejsInit = new EventEmitter();\n\n  constructor(\n    @Optional() @Inject(GLOBALS) private globalConfig: SortablejsOptions,\n    private service: SortablejsService,\n    private element: ElementRef,\n    private zone: NgZone,\n    private renderer: Renderer2,\n  ) { }\n\n  ngOnInit() {\n    if (Sortable && Sortable.create) { // Sortable does not exist in angular universal (SSR)\n      if (this.runInsideAngular) {\n        this.create();\n      } else {\n        this.zone.runOutsideAngular(() => this.create());\n      }\n    }\n  }\n\n  ngOnChanges(changes: { [prop in keyof SortablejsDirective]: SimpleChange }) {\n    const optionsChange: SimpleChange = changes.sortablejsOptions;\n\n    if (optionsChange && !optionsChange.isFirstChange()) {\n      const previousOptions: SortablejsOptions = optionsChange.previousValue;\n      const currentOptions: SortablejsOptions = optionsChange.currentValue;\n\n      Object.keys(currentOptions).forEach(optionName => {\n        if (currentOptions[optionName] !== previousOptions[optionName]) {\n          // use low-level option setter\n          this.sortableInstance.option(optionName, this.options[optionName]);\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sortableInstance) {\n      this.sortableInstance.destroy();\n    }\n  }\n\n  private create() {\n    const container = this.sortablejsContainer ? this.element.nativeElement.querySelector(this.sortablejsContainer) : this.element.nativeElement;\n\n    setTimeout(() => {\n      this.sortableInstance = Sortable.create(container, this.options);\n      this.sortablejsInit.emit(this.sortableInstance);\n    }, 0);\n  }\n\n  private getBindings(): SortablejsBindings {\n    if (!this.sortablejs) {\n      return new SortablejsBindings([]);\n    } else if (this.sortablejs instanceof SortablejsBindings) {\n      return this.sortablejs;\n    } else {\n      return new SortablejsBindings([this.sortablejs]);\n    }\n  }\n\n  private get options() {\n    return { ...this.optionsWithoutEvents, ...this.overridenOptions };\n  }\n\n  private get optionsWithoutEvents() {\n    return { ...(this.globalConfig || {}), ...(this.sortablejsOptions || {}) };\n  }\n\n  private proxyEvent(eventName: string, ...params: any[]) {\n    this.zone.run(() => { // re-entering zone, see https://github.com/SortableJS/angular-sortablejs/issues/110#issuecomment-408874600\n      if (this.optionsWithoutEvents && this.optionsWithoutEvents[eventName]) {\n        this.optionsWithoutEvents[eventName](...params);\n      }\n    });\n  }\n\n  private get isCloning() {\n    return this.sortableInstance.options.group.checkPull(this.sortableInstance, this.sortableInstance) === 'clone';\n  }\n\n  private clone<T>(item: T): T {\n    // by default pass the item through, no cloning performed\n    return (this.sortablejsCloneFunction || (subitem => subitem))(item);\n  }\n\n  private get overridenOptions(): SortablejsOptions {\n    // always intercept standard events but act only in case items are set (bindingEnabled)\n    // allows to forget about tracking this.items changes\n    return {\n      onAdd: (event: SortableEvent) => {\n        this.service.transfer = (items: any[]) => {\n          this.getBindings().injectIntoEvery(event.newIndex, items);\n          this.proxyEvent('onAdd', event);\n        };\n\n        this.proxyEvent('onAddOriginal', event);\n      },\n      onRemove: (event: SortableEvent) => {\n        const bindings = this.getBindings();\n\n        if (bindings.provided) {\n          if (this.isCloning) {\n            this.service.transfer(bindings.getFromEvery(event.oldIndex).map(item => this.clone(item)));\n\n            // great thanks to https://github.com/tauu\n            // event.item is the original item from the source list which is moved to the target list\n            // event.clone is a clone of the original item and will be added to source list\n            // If bindings are provided, adding the item dom element to the target list causes artifacts\n            // as it interferes with the rendering performed by the angular template.\n            // Therefore we remove it immediately and also move the original item back to the source list.\n            // (event handler may be attached to the original item and not its clone, therefore keeping\n            // the original dom node, circumvents side effects )\n            this.renderer.removeChild(event.item.parentNode, event.item);\n            this.renderer.insertBefore(event.clone.parentNode, event.item, event.clone);\n            this.renderer.removeChild(event.clone.parentNode, event.clone);\n          } else {\n            this.service.transfer(bindings.extractFromEvery(event.oldIndex));\n          }\n\n          this.service.transfer = null;\n        }\n\n        this.proxyEvent('onRemove', event);\n      },\n      onUpdate: (event: SortableEvent) => {\n        const bindings = this.getBindings();\n        const indexes = getIndexesFromEvent(event);\n\n        bindings.injectIntoEvery(indexes.new, bindings.extractFromEvery(indexes.old));\n        this.proxyEvent('onUpdate', event);\n      },\n    };\n  }\n\n}\n\ninterface SortableEvent {\n  oldIndex: number;\n  newIndex: number;\n  oldDraggableIndex?: number;\n  newDraggableIndex?: number;\n  item: HTMLElement;\n  clone: HTMLElement;\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { GLOBALS } from './globals';\nimport { SortablejsOptions } from './sortablejs-options';\nimport { SortablejsDirective } from './sortablejs.directive';\n\n@NgModule({\n  declarations: [SortablejsDirective],\n  exports: [SortablejsDirective],\n})\nexport class SortablejsModule {\n\n  public static forRoot(globalOptions: SortablejsOptions): ModuleWithProviders {\n    return {\n      ngModule: SortablejsModule,\n      providers: [\n        { provide: GLOBALS, useValue: globalOptions },\n      ],\n    };\n  }\n\n}\n"],"names":[],"mappings":"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"}