{
  "_from": "@angular-builders/custom-webpack",
  "_id": "@angular-builders/custom-webpack@10.0.0",
  "_inBundle": false,
  "_integrity": "sha512-5uUUN+Mbg+RUTs4XCADuNC1k/tmRcWWrDbZFkn8QfqopWPHA2qDZIChA3oLeU0yH3t0Q4ugemcb51XAU0/eO7Q==",
  "_location": "/@angular-builders/custom-webpack",
  "_phantomChildren": {
    "arg": "4.1.3",
    "diff": "4.0.2",
    "make-error": "1.3.6",
    "source-map-support": "0.5.19",
    "yn": "3.1.1"
  },
  "_requested": {
    "escapedName": "@angular-builders%2fcustom-webpack",
    "fetchSpec": "latest",
    "name": "@angular-builders/custom-webpack",
    "raw": "@angular-builders/custom-webpack",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@angular-builders",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/@angular-builders/custom-webpack/-/custom-webpack-10.0.0.tgz",
  "_shasum": "9dac43cf627692de1d2c44967252e4d9567fc297",
  "_spec": "@angular-builders/custom-webpack",
  "_where": "/home/aloha/storage/sitebuilder/frontend",
  "author": {
    "name": "JeB Barabanov"
  },
  "builders": "builders.json",
  "bundleDependencies": false,
  "dependencies": {
    "@angular-devkit/architect": ">=0.1000.0 < 0.1100.0",
    "@angular-devkit/build-angular": ">=0.1000.0 < 0.1100.0",
    "@angular-devkit/core": "^10.0.0",
    "lodash": "^4.17.15",
    "ts-node": "^8.10.2",
    "webpack-merge": "^4.2.2"
  },
  "deprecated": false,
  "description": "Custom webpack builders for Angular build facade. Allow to modify Angular build configuration without ejecting it",
  "devDependencies": {},
  "engines": {
    "node": ">=10.13.0"
  },
  "files": [
    "builders.json",
    "dist"
  ],
  "gitHead": "03ffba753533f3c0c9f8aa670c4b4b4191ae4b83",
  "keywords": [
    "angular",
    "angular-cli",
    "angular6",
    "builder",
    "cli",
    "custom",
    "webpack"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "@angular-builders/custom-webpack",
  "optionalDependencies": {},
  "readme": "# Custom webpack [builders](#builders) for Angular build facade\n\n[![npm version](https://img.shields.io/npm/v/@angular-builders/custom-webpack.svg) ![npm (tag)](https://img.shields.io/npm/v/@angular-builders/custom-webpack/next.svg) ![npm](https://img.shields.io/npm/dm/@angular-builders/custom-webpack.svg)](https://www.npmjs.com/package/@angular-builders/custom-webpack)\n\nAllow customizing build configuration without ejecting webpack configuration (`ng eject`)\n\n# This documentation is for the latest major version only\n\n## Previous versions\n\n- [Version 7](https://github.com/just-jeb/angular-builders/blob/7.x.x/packages/custom-webpack/README.md)\n- [Version 8](https://github.com/just-jeb/angular-builders/blob/8.x.x/packages/custom-webpack/README.md)\n- [Version 9](https://github.com/just-jeb/angular-builders/blob/9.x.x/packages/custom-webpack/README.md)\n\n## Prerequisites:\n\n- [Angular CLI 10](https://www.npmjs.com/package/@angular/cli)\n\n# Usage\n\n1.  `npm i -D @angular-builders/custom-webpack`\n2.  In your `angular.json`:\n    ```js\n    \"projects\": {\n      ...\n      \"[project]\": {\n        ...\n        \"architect\": {\n          ...\n          \"[architect-target]\": {\n            \"builder\": \"@angular-builders/custom-webpack:[browser|server|karma|dev-server]\"\n            \"options\": {\n              ...\n            }\n    ```\n    Where:\n    - [project] is the name of the project to which you want to add the builder\n    - [architect-target] is the name of build target you want to run (build, serve, test etc. or any custom target)\n    - [browser|server|karma|dev-server] one of the supported builders - [browser](#Custom-webpack-browser), [server](#Custom-webpack-server), [karma](#Custom-webpack-Karma) or [dev-server](#Custom-webpack-dev-server)\n3.  If `[architect-target]` is not one of the predefined targets (like build, serve, test etc.) then run it like this:  \n    `ng run [project]:[architect-target]`  \n    If it is one of the predefined targets, you can run it with `ng [architect-target]`\n\n## For Example\n\n- angular.json:\n  ```js\n  \"projects\": {\n    ...\n    \"example-app\": {\n      ...\n      \"architect\": {\n        ...\n        \"build\": {\n          \"builder\": \"@angular-builders/custom-webpack:browser\"\n          \"options\": {\n            ...\n          }\n  ```\n- Run the build: `ng build`\n\n# Builders\n\n- [@angular-builders/custom-webpack:browser](#Custom-webpack-browser)\n- [@angular-builders/custom-webpack:server](#Custom-webpack-server)\n- [@angular-builders/custom-webpack:karma](#Custom-webpack-Karma)\n- [@angular-builders/custom-webpack:dev-server](#Custom-webpack-dev-server)\n\n## Custom Webpack `browser`\n\nExtended `@angular-devkit/build-angular:browser` builder that allows to specify additional webpack configuration (on top of the existing under the hood) and `index.html` tranformations.\nThe builder will run the same build as `@angular-devkit/build-angular:browser` does with extra parameters that are specified in the provided webpack configuration. It will also run transformation on `index.html` if specified.\n\nBuilder options:\n\n- All the `@angular-devkit/build-angular:browser` options\n- `customWebpackConfig`: [see below](#custom-webpack-config-object)\n- `indexTransform`: [see below](#index-transform)\n\n`angular.json` Example:\n\n```js\n\"architect\": {\n  ...\n  \"build\": {\n    \"builder\": \"@angular-builders/custom-webpack:browser\"\n    \"options\": {\n      \"customWebpackConfig\": {\n        \"path\": \"./extra-webpack.config.js\",\n        \"mergeStrategies\": {\n          \"externals\": \"replace\"\n        }\n      },\n      \"indexTransform\": \"./index-html-transform.js\",\n      \"outputPath\": \"dist/my-cool-client\",\n      \"index\": \"src/index.html\",\n      \"main\": \"src/main.ts\",\n      \"polyfills\": \"src/polyfills.ts\",\n      \"tsConfig\": \"src/tsconfig.app.json\"\n    }\n```\n\nIn this example `externals` entry from `extra-webpack.config.js` will replace `externals` entry from Angular CLI underlying webpack config while all the rest will be appended. In addition `index.html` will be modified by the function exported from `./index-html-transform.js`.\n\n## Custom Webpack `dev-server`\n\nEnhanced `@angular-devkit/build-angular:dev-server` builder that leverages the custom webpack builder to get webpack configuration.\n\nUnlike the default `@angular-devkit/build-angular:dev-server` it doesn't use `@angular-devkit/build-angular:browser` configuration to run the dev server. Instead it uses `customWebpackConfiguration` from `browserTarget` and runs custom webpack dev server build.\n\nThus, if you use `@angular-builders/custom-webpack:dev-server` along with `@angular-builders/custom-webpack:browser`, `ng serve` will run with custom configuration provided in the latter.\n\n### Example\n\n`angular.json`:\n\n```js\n\"architect\": {\n  ...\n  \"build\": {\n    \"builder\": \"@angular-builders/custom-webpack:browser\",\n    \"options\": {\n      \"customWebpackConfig\": {\n         \"path\": \"./extra-webpack.config.js\"\n      },\n      ...\n    }\n  },\n  \"serve\": {\n    \"builder\": \"@angular-builders/custom-webpack:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"my-project:build\"\n    }\n  }\n```\n\nIn this example `dev-server` will use `custom-webpack:browser` builder, hence modified webpack config, when invoking the serve target.\n\n## Custom Webpack `server`\n\nExtended `@angular-devkit/build-angular:server` builder that allows to specify additional webpack configuration (on top of the existing under the hood) and `index.html` tranformations.\nThe builder will run the same build as `@angular-devkit/build-angular:server` does with extra parameters that are specified in the provided webpack configuration.\n\nBuilder options:\n\n- All the `@angular-devkit/build-angular:server` options\n- `customWebpackConfig`: [see below](#custom-webpack-config-object)\n\n`angular.json` Example:\n\n```js\n\"architect\": {\n  ...\n  \"build\": {\n    \"builder\": \"@angular-builders/custom-webpack:server\"\n    \"options\": {\n      \"customWebpackConfig\": {\n        \"path\": \"./extra-webpack.config.js\",\n        \"mergeStrategies\": {\n          \"module.rules\": \"prepend\"\n        },\n        \"replaceDuplicatePlugins\": true\n      },\n      \"outputPath\": \"dist/my-cool-server\",\n      \"main\": \"src/main.server.ts\",\n      \"tsConfig\": \"src/tsconfig.server.json\"\n    }\n```\n\nIn this example `module.rules` entry from `extra-webpack.config.js` will be prepended to `module.rules` entry from Angular CLI underlying webpack config while all the rest will be appended.\nSince loaders are evaluated [from right to left](https://webpack.js.org/concepts/loaders/#configuration) this will effectively mean that the loaders you define in your custom configuration will be applied **after** the loaders defined by Angular CLI.\n\n## Custom Webpack `karma`\n\nExtended `@angular-devkit/build-angular:karma` builder that allows to specify additional webpack configuration (on top of the existing under the hood) and `index.html` tranformations.\nThe builder will run the same build as `@angular-devkit/build-angular:karma` does with extra parameters that are specified in the provided webpack configuration.\n\nBuilder options:\n\n- All the `@angular-devkit/build-angular:karma` options\n- `customWebpackConfig`: [see below](#custom-webpack-config-object)\n\n`angular.json` Example:\n\n```js\n\"architect\": {\n  ...\n  \"test\": {\n    \"builder\": \"@angular-builders/custom-webpack:karma\"\n    \"options\": {\n      \"customWebpackConfig\": {\n        \"path\": \"./extra-webpack.config.js\"\n      },\n      \"main\": \"src/test.ts\",\n      \"polyfills\": \"src/polyfills.ts\",\n      \"tsConfig\": \"src/tsconfig.spec.json\",\n      \"karmaConfig\": \"src/karma.conf.js\",\n    }\n```\n\n# Custom Webpack Config Object\n\nThis option defines your custom webpack configuration. If not specified at all, plain Angular build will run.  \nThe following properties are available:\n\n- `path`: path to the extra webpack configuration, defaults to `webpack.config.js`.\n  The configuration file can export either an object or a function. If it is an object it shall contain only modifications and additions, you don't have to specify the whole webpack configuration.  \n   Thus, if you'd like to add some options to `style-loader` (which already there because of default Angular configuration), you only have to specify this part of the loader:\n  ```js\n  {\n    test: /\\.css$/,\n    use: [\n      {\n        loader: 'style-loader',\n        options: {\n          // `style-loader` options here...\n        }\n      }\n    ]\n  }\n  ```\n  The builder will take care of merging the delta with the existing configuration provided by Angular.  \n   In more complicated cases you'd probably want to [use a function](#custom-webpack-config-function) instead of an object.\n- `mergeStrategies`: webpack config merge strategies, can be `append | prepend | replace` per webpack config entry. Defaults to `append`.\n  - `append`: appends the given entry configuration (in custom webpack config) to the existing Angular CLI webpack configuration.\n  - `prepend`: prepends the given entry configuration (in custom webpack config) to the existing field configuration (in Angular CLI webpack config). The custom loaders config will be added to the _beginning_ of the existing loaders array.\n  - `replace`: replaces the given entry configuration entirely. The custom webpack config will replace the Angular CLI webpack config (for this particular entry).\n    See [webpack-merge](https://github.com/survivejs/webpack-merge) for more info.\n- `replaceDuplicatePlugins`: Defaults to `false`. If `true`, the plugins in custom webpack config will replace the corresponding plugins in default Angular CLI webpack configuration. If `false`, the [default behavior](#merging-plugins-configuration) will be applied.\n  **Note that if `true`, this option will override `mergeStrategies` for `plugins` field.**\n\nWebpack configuration can be also written in TypeScript. Given the following example:\n\n```ts\n// extra-webpack.config.ts\nimport * as webpack from 'webpack';\n\nexport default {\n  output: {\n    library: 'shop',\n    libraryTarget: 'umd',\n  },\n} as webpack.Configuration;\n```\n\nDo not forget to specify the correct path to this file:\n\n```js\n\"customWebpackConfig\": {\n  \"path\": \"./extra-webpack.config.ts\"\n},\n```\n\n## Merging Plugins Configuration:\n\nIf in your custom configuration you specify a plugin that is already added by Angular CLI then by default the two instances will be merged.  \nIn case of the conflicts your configuration will override the existing one.  \nThus, if you'd like to modify an existing plugin configuration, all you have to do is specify the _delta_ you want to change.  \nFor example, if you'd like to allow cyclic dependencies that include dynamic imports you only have to specify this single entry:\n\n```js\nmodule.exports = {\n  plugins: [\n    new CircularDependencyPlugin({\n      allowAsyncCycles: true,\n    }),\n  ],\n};\n```\n\nKeep in mind though that if there are default values in the plugin's constructor, they would override the corresponding values in the existing instance. So these you have to set explicitly to the same values Angular sets.  \nYou can check out an example for plugins merge in the [unit tests](./src/webpack-config-merger.spec.ts) and in [this](https://github.com/just-jeb/angular-builders/issues/13) issue.\n\n## Custom Webpack Promisified Config\n\nWebpack config can also export a `Promise` object that resolves custom config. Given the following example:\n\n```js\n// extra-webpack.config.js\nconst fs = require('fs');\nconst util = require('util');\nconst webpack = require('webpack');\n\nconst readFile = util.promisify(fs.readFile);\n\nmodule.exports = readFile('./LICENSE', {\n  encoding: 'utf-8',\n}).then(license => ({\n  plugins: [new webpack.BannerPlugin(license)],\n}));\n```\n\nIn this case, the behavior will be the same as when exporting a plain object — the resolved configuration will be merged with the base one.\n\n## Custom Webpack Config Function\n\nIf `customWebpackConfig.path` file exports a function, the behaviour of the builder changes : no more automatic merge is applied, instead the function\nis called with the base Webpack configuration and must return the new configuration.\n\nThe function is called with the base config the builder options and the target options as parameters.\n`TargetOptions` follows `target` definition from [this](https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/architect/src/input-schema.json) schema\nand can be used to manipulate your build based on the build target.\n\nIn this case, `mergeStrategies` and `replaceDuplicatePlugins` options have no effect.\n\n`custom-webpack.config.js` example :\n\n```js\nconst webpack = require('webpack');\nconst pkg = require('./package.json');\n\nmodule.exports = (config, options, targetOptions) => {\n  config.plugins.push(\n    new webpack.DefinePlugin({\n      APP_VERSION: JSON.stringify(pkg.version),\n    })\n  );\n\n  return config;\n};\n```\n\nAlternatively, using TypeScript:\n\n```ts\nimport { CustomWebpackBrowserSchema, TargetOptions } from '@angular-builders/custom-webpack';\nimport * as webpack from 'webpack';\nimport * as pkg from './package.json';\n\nexport default (\n  config: webpack.Configuration,\n  options: CustomWebpackBrowserSchema,\n  targetOptions: TargetOptions\n) => {\n  config.plugins.push(\n    new webpack.DefinePlugin({\n      APP_VERSION: JSON.stringify(pkg.version),\n    })\n  );\n\n  return config;\n};\n```\n\nIt's also possible to export an asynchronous factory (factory that returns a `Promise` object). Let's look at the following example:\n\n```js\n// extra-webpack.config.js\nconst axios = require('axios');\nconst webpack = require('webpack');\n\nasync function getPortalVersion() {\n  const response = await axios.get('http://portal.com/version');\n  return response.data.version;\n}\n\nmodule.exports = async config => {\n  const version = await getPortalVersion();\n\n  config.plugins.push(\n    new webpack.DefinePlugin({\n      APP_VERSION: JSON.stringify(version),\n    })\n  );\n\n  return config;\n};\n```\n\n# Index Transform\n\nSince Angular 8 `index.html` is not generated as part of the Webpack build. If you want to modify your `index.html` you should use `indexTransform` option.  \n`indexTransform` is a path (relative to workspace root) to a `.js` or `.ts` file that exports transformation function for `index.html`.  \nFunction signature is as following:\n\n```typescript\n(options: TargetOptions, indexHtmlContent: string) => string|Promise<string>;\n```\n\nor, in other words, the function receives target options and original `index.html` content (generated by Angular CLI) and returns a new content as `string` or `Promise`.  \n`TargetOptions` follows `target` definition from [this](https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/architect/src/input-schema.json) schema and looks like this:\n\n```typescript\nexport interface Target {\n  configuration?: string;\n  project: string;\n  target: string;\n}\n```\n\nIt is useful when you want to transform your `index.html` according to the build options.\n\n## Example\n\n`angular.json`:\n\n```js\n\"architect\": {\n  ...\n  \"build\": {\n    \"builder\": \"@angular-builders/custom-webpack:browser\"\n    \"options\": {\n      \"indexTransform\": \"./index-html-transform.js\"\n      ...\n    }\n```\n\n`index-html-transform.js`:\n\n```js\nmodule.exports = (targetOptions, indexHtml) => {\n  const i = indexHtml.indexOf('</body>');\n  const config = `<p>Configuration: ${targetOptions.configuration}</p>`;\n  return `${indexHtml.slice(0, i)}\n            ${config}\n            ${indexHtml.slice(i)}`;\n};\n```\n\nAlternatively, using TypeScript:\n\n```ts\nimport { TargetOptions } from '@angular-builders/custom-webpack';\n\nexport default (targetOptions: TargetOptions, indexHtml: string) => {\n  const i = indexHtml.indexOf('</body>');\n  const config = `<p>Configuration: ${targetOptions.configuration}</p>`;\n  return `${indexHtml.slice(0, i)}\n            ${config}\n            ${indexHtml.slice(i)}`;\n};\n```\n\nIn the example we add a paragraph with build configuration to your `index.html`. It is a very simple example without any asynchronous code but you can also return a `Promise` from this function.\n\nFull example [here](https://github.com/just-jeb/angular-builders/tree/master/packages/custom-webpack/examples/full-cycle-app).\n\n# Further Reading\n\n- [Customizing Angular CLI build - an alternative to ng eject](https://medium.com/angular-in-depth/customizing-angular-cli-build-an-alternative-to-ng-eject-v2-c655768b48cc)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/just-jeb/angular-builders/tree/master/packages/custom-webpack"
  },
  "scripts": {
    "build": "../../node_modules/.bin/tsc && ../../node_modules/.bin/ts-node ../../merge-schemes.ts",
    "ci": "./scripts/ci.sh",
    "clean": "../../node_modules/.bin/rimraf dist",
    "e2e": "../../node_modules/.bin/jest --config ../../jest-e2e.config.js",
    "postbuild": "yarn test && yarn run e2e",
    "prebuild": "yarn clean",
    "test": "../../node_modules/.bin/jest --config ../../jest-ut.config.js"
  },
  "version": "10.0.0"
}
